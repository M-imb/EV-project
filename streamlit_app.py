import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
import category_encoders as ce
import plotly.express as px
import plotly.graph_objects as go
from catboost import CatBoostRegressor
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(page_title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π", layout="wide")
st.title("üìä EV Project - –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑")
st.write("## –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data():
url = "https://raw.githubusercontent.com/M-imb/EV_final-project/master/Electric_Vehicle_Population_Data.parquet"
try:
df = pd.read_parquet(url, engine="pyarrow")
return df
except Exception as e:
st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
return pd.DataFrame()

df = load_data()

if df.empty:
st.stop()

# --- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
df.columns = df.columns.str.replace(' ', '_')
df['Base_MSRP'] = pd.to_numeric(df['Base_MSRP'], errors='coerce')
df = df.dropna(subset=["Electric_Vehicle_Type", "Model_Year", "Make", "Electric_Range", "Base_MSRP", "Vehicle_Location"])

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
df['MSRP_Category'] = pd.cut(df['Base_MSRP'], bins=[0, 30000, 50000, 80000, np.inf], labels=['Low', 'Mid', 'High', 'Premium'])
df['EV_Type_Simplified'] = df['Electric_Vehicle_Type'].apply(lambda x: 'BEV' if 'Battery' in x else 'PHEV')

st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
year_filter = st.sidebar.slider("–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞", int(df["Model_Year"].min()), int(df["Model_Year"].max()), (2010, 2022))

df_filtered = df[(df["Model_Year"] >= year_filter[0]) & (df["Model_Year"] <= year_filter[1])]

if df_filtered.empty:
st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç.")
st.stop()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ---
tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "üìâ –ü—Ä–æ–≥–Ω–æ–∑ (–†–µ–≥—Ä–µ—Å—Å–∏—è)", "üìà –ü—Ä–æ–≥–Ω–æ–∑ (–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã)"])

# --- –í–ö–õ–ê–î–ö–ê 1: –ê–ù–ê–õ–ò–ó –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ---
with tab1:
st.header("–û–±–∑–æ—Ä –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
st.subheader("üîç –°–ª—É—á–∞–π–Ω—ã–µ 10 —Å—Ç—Ä–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
st.dataframe(df_filtered.sample(10), use_container_width=True)

st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
col1, col2 = st.columns(2)
with col1:
fig_sales_by_year = px.histogram(df_filtered, x='Model_Year', title='–ü—Ä–æ–¥–∞–∂–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –ø–æ –≥–æ–¥–∞–º')
st.plotly_chart(fig_sales_by_year, use_container_width=True)
with col2:
top_makes = df_filtered['Make'].value_counts().nlargest(10).index
df_top_makes = df_filtered[df_filtered['Make'].isin(top_makes)]
fig_make_sales = px.histogram(df_top_makes, x='Make', color='EV_Type_Simplified',
title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º –∏ —Ç–∏–ø–∞–º EV', barmode='group')
st.plotly_chart(fig_make_sales, use_container_width=True)

st.subheader("üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂")
try:
location_counts = df_filtered['Vehicle_Location'].value_counts().reset_index()
location_counts.columns = ['location', 'count']
if 'State' in df_filtered.columns:
sales_by_state = df_filtered['State'].value_counts().reset_index()
sales_by_state.columns = ['State', 'Count']
fig_geo = px.choropleth(sales_by_state, locations='State', locationmode="USA-states", color='Count',
scope="usa", color_continuous_scale="Viridis",
title='–ü—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —à—Ç–∞—Ç–∞–º –°–®–ê')
st.plotly_chart(fig_geo, use_container_width=True)
else:
st.warning("–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–µ–æ–∫–∞—Ä—Ç—ã –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —à—Ç–∞—Ç–∞—Ö. –í –∏—Å—Ö–æ–¥–Ω–æ–º –Ω–∞–±–æ—Ä–µ –∏—Ö –Ω–µ—Ç.")
except Exception as e:
st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥–µ–æ–∫–∞—Ä—Ç—ã: {e}")

st.subheader("ü§ù –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
correlation_df = df_filtered[['Model_Year', 'Electric_Range', 'Base_MSRP']].corr()
fig_corr = px.imshow(correlation_df, text_auto=True, color_continuous_scale='RdBu_r',
title='–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')
st.plotly_chart(fig_corr, use_container_width=True)

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ ---
df_regression = df_filtered.copy()
df_regression['Make_encoded'] = ce.TargetEncoder(cols=['Make']).fit_transform(df_regression['Make'], df_regression['Base_MSRP'])
features_reg = ['Model_Year', 'Electric_Range', 'Make_encoded']
target_reg = 'Base_MSRP'
X_reg = df_regression[features_reg]
y_reg = df_regression[target_reg]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg, y_reg, test_size=0.3, random_state=42)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
scaler_reg = StandardScaler()
X_train_reg_scaled = scaler_reg.fit_transform(X_train_reg)
X_test_reg_scaled = scaler_reg.transform(X_test_reg)

# --- –í–ö–õ–ê–î–ö–ê 2: –ü–†–û–ì–ù–û–ó (–†–ï–ì–†–ï–°–°–ò–Ø) ---
with tab2:
st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã (–†–µ–≥—Ä–µ—Å—Å–∏—è)")
st.subheader("üõ†Ô∏è –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
models_reg = {
'Linear Regression': LinearRegression(),
'CatBoost': CatBoostRegressor(verbose=0, random_state=42),
'Random Forest': RandomForestRegressor(random_state=42)
}
metrics_reg = []
predictions_reg = {}
for name, model in models_reg.items():
model.fit(X_train_reg_scaled, y_train_reg)
y_pred = model.predict(X_test_reg_scaled)
rmse = np.sqrt(mean_squared_error(y_test_reg, y_pred))
mae = mean_absolute_error(y_test_reg, y_pred)
r2 = r2_score(y_test_reg, y_pred)
metrics_reg.append({'Model': name, 'RMSE': rmse, 'MAE': mae, 'R¬≤': r2})
predictions_reg[name] = y_pred

st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
fig_reg = go.Figure()
fig_reg.add_trace(go.Scatter(x=y_test_reg.index, y=y_test_reg, mode='markers', name='–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'))
for name, pred in predictions_reg.items():
fig_reg.add_trace(go.Scatter(x=y_test_reg.index, y=pred, mode='lines', name=f'–ü—Ä–æ–≥–Ω–æ–∑ {name}'))
fig_reg.update_layout(title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–æ–¥–µ–ª–µ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏', xaxis_title='–ò–Ω–¥–µ–∫—Å', yaxis_title='Base MSRP')
st.plotly_chart(fig_reg, use_container_width=True)

st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫")
metrics_df_reg = pd.DataFrame(metrics_reg)
st.table(metrics_df_reg)

st.subheader("‚ú® –í—ã–≤–æ–¥—ã")
best_model_r2 = metrics_df_reg.loc[metrics_df_reg['R¬≤'].idxmax()]
st.write(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ –º–µ—Ç—Ä–∏–∫–µ R¬≤: **{best_model_r2['Model']}** —Å R¬≤ = {best_model_r2['R¬≤']:.2f}")
st.write("CatBoost –∏ Random Forest, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á–µ–º –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–ø–æ—Å–æ–±–Ω—ã —É–ª–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö.")

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ ---
df_ts = df_filtered.groupby('Model_Year')['Base_MSRP'].mean().reset_index()
df_ts['Model_Year'] = pd.to_datetime(df_ts['Model_Year'], format='%Y')
df_ts.set_index('Model_Year', inplace=True)
ts = df_ts['Base_MSRP']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
train_ts = ts[:'2020']
test_ts = ts['2021':]

# --- –í–ö–õ–ê–î–ö–ê 3: –ü–†–û–ì–ù–û–ó (–í–†–ï–ú–ï–ù–ù–´–ï –†–Ø–î–´) ---
with tab3:
st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã (–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã)")
st.subheader("üîç –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
try:
decomposition = seasonal_decompose(ts, model='additive', period=1)
fig_decomp = go.Figure()
fig_decomp.add_trace(go.Scatter(x=decomposition.trend.index, y=decomposition.trend, mode='lines', name='–¢—Ä–µ–Ω–¥'))
fig_decomp.add_trace(go.Scatter(x=decomposition.seasonal.index, y=decomposition.seasonal, mode='lines', name='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'))
fig_decomp.add_trace(go.Scatter(x=decomposition.resid.index, y=decomposition.resid, mode='markers', name='–û—Å—Ç–∞—Ç–∫–∏'))
fig_decomp.update_layout(title='–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞', xaxis_title='–ì–æ–¥', yaxis_title='Base MSRP')
st.plotly_chart(fig_decomp, use_container_width=True)

st.subheader("üßê –¢–µ—Å—Ç –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞")
adf_test = adfuller(ts)
st.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞:", adf_test[0])
st.write("p-value:", adf_test[1])
st.write("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:", adf_test[4])
if adf_test[1] < 0.05:
st.success("–†—è–¥ **—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω** (p-value < 0.05).")
else:
st.warning("–†—è–¥ **–Ω–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω** (p-value >= 0.05). –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ.")

st.subheader("üìà –ú–æ–¥–µ–ª—å ARIMA")
try:
st.write("–ì—Ä–∞—Ñ–∏–∫–∏ ACF –∏ PACF –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ARIMA:")
fig_acf = go.Figure(data=go.Scatter(x=np.arange(len(acf(ts, nlags=5))), y=acf(ts, nlags=5)))
fig_acf.update_layout(title='ACF Plot', xaxis_title='Lag', yaxis_title='ACF')
st.plotly_chart(fig_acf, use_container_width=True)
fig_pacf = go.Figure(data=go.Scatter(x=np.arange(len(pacf(ts, nlags=5))), y=pacf(ts, nlags=5)))
fig_pacf.update_layout(title='PACF Plot', xaxis_title='Lag', yaxis_title='PACF')
st.plotly_chart(fig_pacf, use_container_width=True)

p = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ p (AR):", min_value=0, max_value=5, value=1, step=1)
d = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ d (I):", min_value=0, max_value=2, value=0, step=1)
q = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ q (MA):", min_value=0, max_value=5, value=0, step=1)

model_arima = ARIMA(train_ts, order=(p, d, q))
model_arima_fit = model_arima.fit()
predictions_arima = model_arima_fit.forecast(steps=len(test_ts))

fig_arima = go.Figure()
fig_arima.add_trace(go.Scatter(x=train_ts.index, y=train_ts, mode='lines', name='–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞'))
fig_arima.add_trace(go.Scatter(x=test_ts.index, y=test_ts, mode='lines', name='–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞'))
fig_arima.add_trace(go.Scatter(x=test_ts.index, y=predictions_arima, mode='lines', name='–ü—Ä–æ–≥–Ω–æ–∑ ARIMA'))
fig_arima.update_layout(title=f'–ü—Ä–æ–≥–Ω–æ–∑ ARIMA (p={p}, d={d}, q={q})', xaxis_title='–ì–æ–¥', yaxis_title='Base MSRP')
st.plotly_chart(fig_arima, use_container_width=True)

rmse_arima = np.sqrt(mean_squared_error(test_ts, predictions_arima))
st.write(f'RMSE –¥–ª—è ARIMA: {rmse_arima:.2f}')

except Exception as e:
st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ ARIMA: {e}")

st.subheader("üîÆ –ú–æ–¥–µ–ª—å Prophet")
try:
df_prophet = df_ts.copy()
df_prophet = df_prophet.reset_index()
df_prophet.columns = ['ds', 'y']
model_prophet = Prophet()
model_prophet.fit(df_prophet[:-len(test_ts)])
future = model_prophet.make_future_dataframe(periods=len(test_ts), freq='YS')
forecast = model_prophet.predict(future)

fig_prophet = go.Figure()
fig_prophet.add_trace(go.Scatter(x=df_prophet['ds'][:-len(test_ts)], y=df_prophet['y'][:-len(test_ts)], mode='lines', name='–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞'))
fig_prophet.add_trace(go.Scatter(x=df_prophet['ds'][-len(test_ts):], y=df_prophet['y'][-len(test_ts):], mode='lines', name='–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞'))
fig_prophet.add_trace(go.Scatter(x=forecast['ds'][-len(test_ts):], y=forecast['yhat'][-len(test_ts):], mode='lines', name='–ü—Ä–æ–≥–Ω–æ–∑ Prophet'))
fig_prophet.update_layout(title='–ü—Ä–æ–≥–Ω–æ–∑ Prophet', xaxis_title='–ì–æ–¥', yaxis_title='Base MSRP')
st.plotly_chart(fig_prophet, use_container_width=True)

predictions_prophet = forecast['yhat'][-len(test_ts):].values
rmse_prophet = np.sqrt(mean_squared_error(test_ts, predictions_prophet))
st.write(f'RMSE –¥–ª—è Prophet: {rmse_prophet:.2f}')
except Exception as e:
st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ Prophet: {e}")

except Exception as e:
st.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã': {e}")
