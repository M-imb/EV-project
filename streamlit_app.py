import streamlit as st 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from catboost import CatBoostRegressor
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.api import ExponentialSmoothing
from prophet import Prophet
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import pyarrow
import warnings
warnings.filterwarnings('ignore')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π", layout="wide")
st.title("üìä EV Project - –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑")
st.write("## –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
df = pd.read_parquet("Electric_Vehicle_Population_Data.parquet")

df.rename(columns={
    'Model Year': 'year',
    'Make': 'manufacturer',
    'Model': 'model',
    'Electric Vehicle Type': 'ev_type',
    'Electric Range': 'ev_range',
    'Clean Alternative Fuel Vehicle (CAFV) Eligibility': 'cafv_eligible',
    'City': 'city',
    'State': 'state',
    'County': 'county',
    'Electric Utility': 'utility'
}, inplace=True)

df.drop(columns=[
    'VIN (1-10)','Base MSRP','Legislative District','DOL Vehicle ID', 'Postal Code',
    'Vehicle Location','2020 Census Tract'
], inplace=True, errors='ignore')

df['year'] = pd.to_numeric(df['year'], errors='coerce')
df.dropna(subset=['year'], inplace=True)
df['year'] = df['year'].astype(int)

# --- –ê–≥—Ä–µ–≥–∞—Ü–∏—è ---
ts_df = df.groupby('year').size().reset_index(name='vehicle_count')
ts_df['year'] = pd.to_datetime(ts_df['year'], format='%Y')
ts_df.set_index('year', inplace=True)
ts_df = ts_df.asfreq('YS').fillna(0)

# --- –í–∫–ª–∞–¥–∫–∏ ---
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìà –û–±—â–∏–π –æ–±–∑–æ—Ä","üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏","üöó –ú–æ–¥–µ–ª–∏",
    "‚è≥ –ü—Ä–æ–≥–Ω–æ–∑ Prophet","üìä –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑","üß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"
])

# --- –í–∫–ª–∞–¥–∫–∞ 1 ---
with tab1:
    st.subheader("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ ETL")
    st.write(df.shape)
    st.subheader("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫")
    st.dataframe(df.head())

    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ –≥–æ–¥–∞–º")
    fig, ax = plt.subplots(figsize=(8,4))
    ts_df['vehicle_count'].plot(ax=ax)
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ EV")
    ax.set_xlabel("–ì–æ–¥")
    st.pyplot(fig, clear_figure=True)

# --- –í–∫–ª–∞–¥–∫–∞ 2 ---
with tab2:
    st.subheader("–¢–æ–ø-10 –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")
    fig, ax = plt.subplots(figsize=(8,4))
    manufacturer_counts = df['manufacturer'].value_counts().head(10)
    ax.barh(manufacturer_counts.index, manufacturer_counts.values)
    ax.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    ax.set_ylabel("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å")
    st.pyplot(fig, clear_figure=True)

# --- –í–∫–ª–∞–¥–∫–∞ 3 ---
with tab3:
    st.subheader("–¢–æ–ø-10 –º–æ–¥–µ–ª–µ–π")
    st.bar_chart(df['model'].value_counts().head(10))
    st.subheader("–¢–æ–ø-5 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π '–ú–∞—Ä–∫–∞-–ú–æ–¥–µ–ª—å'")
    st.write(df.groupby(['manufacturer','model']).size().nlargest(5))

# --- –í–∫–ª–∞–¥–∫–∞ 4 ---
with tab4:
    st.subheader("–ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ EV (Prophet)")
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å Prophet"):
        prophet_df = ts_df.reset_index().rename(columns={'year': 'ds','vehicle_count':'y'})
        model = Prophet(yearly_seasonality=True, daily_seasonality=False)
        model.fit(prophet_df)
        future = model.make_future_dataframe(periods=5, freq='Y')
        forecast = model.predict(future)
        st.pyplot(model.plot(forecast), clear_figure=True)
        st.pyplot(model.plot_components(forecast), clear_figure=True)

# --- –í–∫–ª–∞–¥–∫–∞ 5 ---
with tab5:
    st.subheader("–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
    decomposition = seasonal_decompose(ts_df['vehicle_count'], model='additive', period=2)
    fig, axes = plt.subplots(4,1,figsize=(8,6),sharex=True)
    decomposition.observed.plot(ax=axes[0],title='–ù–∞–±–ª—é–¥–∞–µ–º—ã–π —Ä—è–¥')
    decomposition.trend.plot(ax=axes[1],title='–¢—Ä–µ–Ω–¥')
    decomposition.seasonal.plot(ax=axes[2],title='–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å')
    decomposition.resid.plot(ax=axes[3],title='–û—Å—Ç–∞—Ç–∫–∏')
    plt.tight_layout()
    st.pyplot(fig, clear_figure=True)

    st.subheader("–¢–µ—Å—Ç –î–∏–∫–∏‚Äì–§—É–ª–ª–µ—Ä–∞")
    result = adfuller(ts_df['vehicle_count'])
    st.write(f"ADF Statistic: {result[0]:.4f}")
    st.write(f"p-value: {result[1]:.4f}")
    if result[1] <= 0.05:
        st.success("–†—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π")
    else:
        st.warning("–†—è–¥ –Ω–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π")

    st.subheader("ACF –∏ PACF")
    fig, axes = plt.subplots(2,1,figsize=(8,4))
    plot_acf(ts_df['vehicle_count'], ax=axes[0])
    plot_pacf(ts_df['vehicle_count'], ax=axes[1])
    plt.tight_layout()
    st.pyplot(fig, clear_figure=True)

# --- –í–∫–ª–∞–¥–∫–∞ 6 ---
with tab6:
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π (–±—ã—Å—Ç—Ä—ã–µ)")
    train_size = int(len(ts_df)*0.8)
    ts_train, ts_test = ts_df.iloc[:train_size], ts_df.iloc[train_size:]

    metrics_df = pd.DataFrame(columns=['Model','RMSE','MAE','R2'])

    def evaluate(model, y_true, y_pred):
        return pd.Series([
            model,
            np.sqrt(mean_squared_error(y_true,y_pred)),
            mean_absolute_error(y_true,y_pred),
            r2_score(y_true,y_pred)
        ], index=metrics_df.columns)

    # –õ–∏–Ω–µ–π–Ω–∞—è, RF, CatBoost
    X = ts_df.index.year.values.reshape(-1,1)
    y = ts_df['vehicle_count'].values
    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,shuffle=False)

    lr = LinearRegression().fit(X_train,y_train)
    rf = RandomForestRegressor(random_state=42).fit(X_train,y_train)
    cb = CatBoostRegressor(random_state=42,verbose=0).fit(X_train,y_train)

    preds = {
        "Linear Regression": lr.predict(X_test),
        "Random Forest": rf.predict(X_test),
        "CatBoost": cb.predict(X_test),
        "ARIMA": ARIMA(ts_train['vehicle_count'],order=(1,1,1)).fit().forecast(len(ts_test)),
        "Holt-Winters": ExponentialSmoothing(ts_train['vehicle_count'],trend='add').fit().forecast(len(ts_test))
    }

    for name,pred in preds.items():
        metrics_df = pd.concat([metrics_df, evaluate(name, ts_test['vehicle_count'], pred).to_frame().T])

    st.dataframe(metrics_df.round(2).sort_values(by="R2",ascending=False))

    st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    fig, ax = plt.subplots(figsize=(10,5))
    ax.plot(ts_df.index, ts_df['vehicle_count'], label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ", color="black")
    for name,pred in preds.items():
        ax.plot(ts_test.index, pred, linestyle="--", label=name)
    ax.legend()
    ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    st.pyplot(fig, clear_figure=True)

    st.subheader("LSTM (–ø–æ –∫–Ω–æ–ø–∫–µ)")
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å LSTM"):
        scaler = MinMaxScaler()
        scaled = scaler.fit_transform(ts_df[['vehicle_count']])
        train, test = scaled[:train_size], scaled[train_size:]

        def seq(data, n=3):
            X,y = [],[]
            for i in range(len(data)-n):
                X.append(data[i:i+n]); y.append(data[i+n])
            return np.array(X), np.array(y)

        X_train_lstm,y_train_lstm = seq(train,3)
        X_test_lstm,y_test_lstm = seq(test,3)

        model_lstm = Sequential([
            LSTM(50,activation='relu',input_shape=(3,1)),
            Dense(1)
        ])
        model_lstm.compile(optimizer='adam',loss='mse')
        model_lstm.fit(X_train_lstm,y_train_lstm,epochs=50,batch_size=1,verbose=0)

        pred_lstm = scaler.inverse_transform(model_lstm.predict(X_test_lstm))

        fig, ax = plt.subplots(figsize=(8,4))
        ax.plot(ts_test.index[3:], scaler.inverse_transform(y_test_lstm), label="–ò—Å—Ç–∏–Ω–Ω—ã–µ")
        ax.plot(ts_test.index[3:], pred_lstm, label="LSTM", linestyle="--")
        ax.legend()
        st.pyplot(fig, clear_figure=True)
